name: CI

on:
  push:

jobs:
  static-analisys:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v4

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v4
        with:
          key: poetry-1.8.5
          path: ~/.local/

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v4
        with:
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-1.8.5
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run Black
        run: poetry run black . --check

      - name: Run Ruff
        run: |
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .


  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v4

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v4
        with:
          key: poetry-1.8.5
          path: ~/.local/

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v4
        with:
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-1.8.5
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Setup EdgeDB
        uses: edgedb/setup-edgedb@v1
        with:
          cli-version: stable
          server-version: stable

      - name: Debug EdgeDB Installation
        run: |
          echo "Checking installed EdgeDB CLI..."
          ls -lah /opt/hostedtoolcache/edgedb-cli/
          ls -lah /opt/hostedtoolcache/edgedb-cli/6.1.2/x64/

      - name: Set EdgeDB CLI Permissions
        run: |
          chmod +x /opt/hostedtoolcache/edgedb-cli/6.1.2/x64/edgedb

      - name: Check EdgeDB Server Status
        run: |
          edgedb instance list || echo "No running instances found."

      - name: Start EdgeDB Instance (if needed)
        run: |
          edgedb instance create testdb || echo "EdgeDB instance already exists."

      - name: Run tests
        run: |
          poetry run coverage run -m pytest .
          poetry run coverage report -m